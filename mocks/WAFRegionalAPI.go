// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"

	waf "github.com/aws/aws-sdk-go/service/waf"

	wafregional "github.com/aws/aws-sdk-go/service/wafregional"
)

// WAFRegionalAPI is an autogenerated mock type for the WAFRegionalAPI type
type WAFRegionalAPI struct {
	mock.Mock
}

// AssociateWebACL provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) AssociateWebACL(_a0 *wafregional.AssociateWebACLInput) (*wafregional.AssociateWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafregional.AssociateWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafregional.AssociateWebACLInput) *wafregional.AssociateWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafregional.AssociateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafregional.AssociateWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) AssociateWebACLRequest(_a0 *wafregional.AssociateWebACLInput) (*request.Request, *wafregional.AssociateWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafregional.AssociateWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafregional.AssociateWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafregional.AssociateWebACLInput) *wafregional.AssociateWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafregional.AssociateWebACLOutput)
		}
	}

	return r0, r1
}

// AssociateWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) AssociateWebACLWithContext(_a0 context.Context, _a1 *wafregional.AssociateWebACLInput, _a2 ...request.Option) (*wafregional.AssociateWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafregional.AssociateWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafregional.AssociateWebACLInput, ...request.Option) *wafregional.AssociateWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafregional.AssociateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafregional.AssociateWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateByteMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateByteMatchSet(_a0 *waf.CreateByteMatchSetInput) (*waf.CreateByteMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateByteMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateByteMatchSetInput) *waf.CreateByteMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateByteMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateByteMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateByteMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateByteMatchSetRequest(_a0 *waf.CreateByteMatchSetInput) (*request.Request, *waf.CreateByteMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateByteMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateByteMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateByteMatchSetInput) *waf.CreateByteMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateByteMatchSetOutput)
		}
	}

	return r0, r1
}

// CreateByteMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateByteMatchSetWithContext(_a0 context.Context, _a1 *waf.CreateByteMatchSetInput, _a2 ...request.Option) (*waf.CreateByteMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateByteMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateByteMatchSetInput, ...request.Option) *waf.CreateByteMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateByteMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateByteMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGeoMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateGeoMatchSet(_a0 *waf.CreateGeoMatchSetInput) (*waf.CreateGeoMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateGeoMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateGeoMatchSetInput) *waf.CreateGeoMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateGeoMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateGeoMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGeoMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateGeoMatchSetRequest(_a0 *waf.CreateGeoMatchSetInput) (*request.Request, *waf.CreateGeoMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateGeoMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateGeoMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateGeoMatchSetInput) *waf.CreateGeoMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateGeoMatchSetOutput)
		}
	}

	return r0, r1
}

// CreateGeoMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateGeoMatchSetWithContext(_a0 context.Context, _a1 *waf.CreateGeoMatchSetInput, _a2 ...request.Option) (*waf.CreateGeoMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateGeoMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateGeoMatchSetInput, ...request.Option) *waf.CreateGeoMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateGeoMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateGeoMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIPSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateIPSet(_a0 *waf.CreateIPSetInput) (*waf.CreateIPSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateIPSetOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateIPSetInput) *waf.CreateIPSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateIPSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIPSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateIPSetRequest(_a0 *waf.CreateIPSetInput) (*request.Request, *waf.CreateIPSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateIPSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateIPSetOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateIPSetInput) *waf.CreateIPSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateIPSetOutput)
		}
	}

	return r0, r1
}

// CreateIPSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateIPSetWithContext(_a0 context.Context, _a1 *waf.CreateIPSetInput, _a2 ...request.Option) (*waf.CreateIPSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateIPSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateIPSetInput, ...request.Option) *waf.CreateIPSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateIPSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRateBasedRule provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRateBasedRule(_a0 *waf.CreateRateBasedRuleInput) (*waf.CreateRateBasedRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateRateBasedRuleOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateRateBasedRuleInput) *waf.CreateRateBasedRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRateBasedRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateRateBasedRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRateBasedRuleRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRateBasedRuleRequest(_a0 *waf.CreateRateBasedRuleInput) (*request.Request, *waf.CreateRateBasedRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateRateBasedRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateRateBasedRuleOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateRateBasedRuleInput) *waf.CreateRateBasedRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateRateBasedRuleOutput)
		}
	}

	return r0, r1
}

// CreateRateBasedRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateRateBasedRuleWithContext(_a0 context.Context, _a1 *waf.CreateRateBasedRuleInput, _a2 ...request.Option) (*waf.CreateRateBasedRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateRateBasedRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateRateBasedRuleInput, ...request.Option) *waf.CreateRateBasedRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRateBasedRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateRateBasedRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegexMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRegexMatchSet(_a0 *waf.CreateRegexMatchSetInput) (*waf.CreateRegexMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateRegexMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateRegexMatchSetInput) *waf.CreateRegexMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRegexMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateRegexMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegexMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRegexMatchSetRequest(_a0 *waf.CreateRegexMatchSetInput) (*request.Request, *waf.CreateRegexMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateRegexMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateRegexMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateRegexMatchSetInput) *waf.CreateRegexMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateRegexMatchSetOutput)
		}
	}

	return r0, r1
}

// CreateRegexMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateRegexMatchSetWithContext(_a0 context.Context, _a1 *waf.CreateRegexMatchSetInput, _a2 ...request.Option) (*waf.CreateRegexMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateRegexMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateRegexMatchSetInput, ...request.Option) *waf.CreateRegexMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRegexMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateRegexMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegexPatternSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRegexPatternSet(_a0 *waf.CreateRegexPatternSetInput) (*waf.CreateRegexPatternSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateRegexPatternSetInput) *waf.CreateRegexPatternSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateRegexPatternSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRegexPatternSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRegexPatternSetRequest(_a0 *waf.CreateRegexPatternSetInput) (*request.Request, *waf.CreateRegexPatternSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateRegexPatternSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateRegexPatternSetOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateRegexPatternSetInput) *waf.CreateRegexPatternSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateRegexPatternSetOutput)
		}
	}

	return r0, r1
}

// CreateRegexPatternSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateRegexPatternSetWithContext(_a0 context.Context, _a1 *waf.CreateRegexPatternSetInput, _a2 ...request.Option) (*waf.CreateRegexPatternSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateRegexPatternSetInput, ...request.Option) *waf.CreateRegexPatternSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateRegexPatternSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRule provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRule(_a0 *waf.CreateRuleInput) (*waf.CreateRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateRuleOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateRuleInput) *waf.CreateRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRuleGroup provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRuleGroup(_a0 *waf.CreateRuleGroupInput) (*waf.CreateRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateRuleGroupInput) *waf.CreateRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRuleGroupRequest(_a0 *waf.CreateRuleGroupInput) (*request.Request, *waf.CreateRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateRuleGroupInput) *waf.CreateRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateRuleGroupOutput)
		}
	}

	return r0, r1
}

// CreateRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateRuleGroupWithContext(_a0 context.Context, _a1 *waf.CreateRuleGroupInput, _a2 ...request.Option) (*waf.CreateRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateRuleGroupInput, ...request.Option) *waf.CreateRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRuleRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateRuleRequest(_a0 *waf.CreateRuleInput) (*request.Request, *waf.CreateRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateRuleOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateRuleInput) *waf.CreateRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateRuleOutput)
		}
	}

	return r0, r1
}

// CreateRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateRuleWithContext(_a0 context.Context, _a1 *waf.CreateRuleInput, _a2 ...request.Option) (*waf.CreateRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateRuleInput, ...request.Option) *waf.CreateRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSizeConstraintSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateSizeConstraintSet(_a0 *waf.CreateSizeConstraintSetInput) (*waf.CreateSizeConstraintSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateSizeConstraintSetOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateSizeConstraintSetInput) *waf.CreateSizeConstraintSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateSizeConstraintSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateSizeConstraintSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSizeConstraintSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateSizeConstraintSetRequest(_a0 *waf.CreateSizeConstraintSetInput) (*request.Request, *waf.CreateSizeConstraintSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateSizeConstraintSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateSizeConstraintSetOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateSizeConstraintSetInput) *waf.CreateSizeConstraintSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateSizeConstraintSetOutput)
		}
	}

	return r0, r1
}

// CreateSizeConstraintSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateSizeConstraintSetWithContext(_a0 context.Context, _a1 *waf.CreateSizeConstraintSetInput, _a2 ...request.Option) (*waf.CreateSizeConstraintSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateSizeConstraintSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateSizeConstraintSetInput, ...request.Option) *waf.CreateSizeConstraintSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateSizeConstraintSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateSizeConstraintSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSqlInjectionMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateSqlInjectionMatchSet(_a0 *waf.CreateSqlInjectionMatchSetInput) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateSqlInjectionMatchSetInput) *waf.CreateSqlInjectionMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateSqlInjectionMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateSqlInjectionMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSqlInjectionMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateSqlInjectionMatchSetRequest(_a0 *waf.CreateSqlInjectionMatchSetInput) (*request.Request, *waf.CreateSqlInjectionMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateSqlInjectionMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateSqlInjectionMatchSetInput) *waf.CreateSqlInjectionMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateSqlInjectionMatchSetOutput)
		}
	}

	return r0, r1
}

// CreateSqlInjectionMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateSqlInjectionMatchSetWithContext(_a0 context.Context, _a1 *waf.CreateSqlInjectionMatchSetInput, _a2 ...request.Option) (*waf.CreateSqlInjectionMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateSqlInjectionMatchSetInput, ...request.Option) *waf.CreateSqlInjectionMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateSqlInjectionMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateSqlInjectionMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebACL provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateWebACL(_a0 *waf.CreateWebACLInput) (*waf.CreateWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateWebACLOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateWebACLInput) *waf.CreateWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateWebACLRequest(_a0 *waf.CreateWebACLInput) (*request.Request, *waf.CreateWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateWebACLOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateWebACLInput) *waf.CreateWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateWebACLOutput)
		}
	}

	return r0, r1
}

// CreateWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateWebACLWithContext(_a0 context.Context, _a1 *waf.CreateWebACLInput, _a2 ...request.Option) (*waf.CreateWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateWebACLInput, ...request.Option) *waf.CreateWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateXssMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateXssMatchSet(_a0 *waf.CreateXssMatchSetInput) (*waf.CreateXssMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.CreateXssMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.CreateXssMatchSetInput) *waf.CreateXssMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateXssMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.CreateXssMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateXssMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) CreateXssMatchSetRequest(_a0 *waf.CreateXssMatchSetInput) (*request.Request, *waf.CreateXssMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.CreateXssMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.CreateXssMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.CreateXssMatchSetInput) *waf.CreateXssMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.CreateXssMatchSetOutput)
		}
	}

	return r0, r1
}

// CreateXssMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) CreateXssMatchSetWithContext(_a0 context.Context, _a1 *waf.CreateXssMatchSetInput, _a2 ...request.Option) (*waf.CreateXssMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.CreateXssMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.CreateXssMatchSetInput, ...request.Option) *waf.CreateXssMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.CreateXssMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.CreateXssMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByteMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteByteMatchSet(_a0 *waf.DeleteByteMatchSetInput) (*waf.DeleteByteMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteByteMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteByteMatchSetInput) *waf.DeleteByteMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteByteMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteByteMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByteMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteByteMatchSetRequest(_a0 *waf.DeleteByteMatchSetInput) (*request.Request, *waf.DeleteByteMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteByteMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteByteMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteByteMatchSetInput) *waf.DeleteByteMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteByteMatchSetOutput)
		}
	}

	return r0, r1
}

// DeleteByteMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteByteMatchSetWithContext(_a0 context.Context, _a1 *waf.DeleteByteMatchSetInput, _a2 ...request.Option) (*waf.DeleteByteMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteByteMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteByteMatchSetInput, ...request.Option) *waf.DeleteByteMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteByteMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteByteMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGeoMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteGeoMatchSet(_a0 *waf.DeleteGeoMatchSetInput) (*waf.DeleteGeoMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteGeoMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteGeoMatchSetInput) *waf.DeleteGeoMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteGeoMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteGeoMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGeoMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteGeoMatchSetRequest(_a0 *waf.DeleteGeoMatchSetInput) (*request.Request, *waf.DeleteGeoMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteGeoMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteGeoMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteGeoMatchSetInput) *waf.DeleteGeoMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteGeoMatchSetOutput)
		}
	}

	return r0, r1
}

// DeleteGeoMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteGeoMatchSetWithContext(_a0 context.Context, _a1 *waf.DeleteGeoMatchSetInput, _a2 ...request.Option) (*waf.DeleteGeoMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteGeoMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteGeoMatchSetInput, ...request.Option) *waf.DeleteGeoMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteGeoMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteGeoMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteIPSet(_a0 *waf.DeleteIPSetInput) (*waf.DeleteIPSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteIPSetOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteIPSetInput) *waf.DeleteIPSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteIPSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteIPSetRequest(_a0 *waf.DeleteIPSetInput) (*request.Request, *waf.DeleteIPSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteIPSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteIPSetOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteIPSetInput) *waf.DeleteIPSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteIPSetOutput)
		}
	}

	return r0, r1
}

// DeleteIPSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteIPSetWithContext(_a0 context.Context, _a1 *waf.DeleteIPSetInput, _a2 ...request.Option) (*waf.DeleteIPSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteIPSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteIPSetInput, ...request.Option) *waf.DeleteIPSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteIPSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoggingConfiguration provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteLoggingConfiguration(_a0 *waf.DeleteLoggingConfigurationInput) (*waf.DeleteLoggingConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteLoggingConfigurationInput) *waf.DeleteLoggingConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteLoggingConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoggingConfigurationRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteLoggingConfigurationRequest(_a0 *waf.DeleteLoggingConfigurationInput) (*request.Request, *waf.DeleteLoggingConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteLoggingConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteLoggingConfigurationOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteLoggingConfigurationInput) *waf.DeleteLoggingConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteLoggingConfigurationOutput)
		}
	}

	return r0, r1
}

// DeleteLoggingConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteLoggingConfigurationWithContext(_a0 context.Context, _a1 *waf.DeleteLoggingConfigurationInput, _a2 ...request.Option) (*waf.DeleteLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteLoggingConfigurationInput, ...request.Option) *waf.DeleteLoggingConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteLoggingConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissionPolicy provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeletePermissionPolicy(_a0 *waf.DeletePermissionPolicyInput) (*waf.DeletePermissionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeletePermissionPolicyOutput
	if rf, ok := ret.Get(0).(func(*waf.DeletePermissionPolicyInput) *waf.DeletePermissionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeletePermissionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeletePermissionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissionPolicyRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeletePermissionPolicyRequest(_a0 *waf.DeletePermissionPolicyInput) (*request.Request, *waf.DeletePermissionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeletePermissionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeletePermissionPolicyOutput
	if rf, ok := ret.Get(1).(func(*waf.DeletePermissionPolicyInput) *waf.DeletePermissionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeletePermissionPolicyOutput)
		}
	}

	return r0, r1
}

// DeletePermissionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeletePermissionPolicyWithContext(_a0 context.Context, _a1 *waf.DeletePermissionPolicyInput, _a2 ...request.Option) (*waf.DeletePermissionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeletePermissionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeletePermissionPolicyInput, ...request.Option) *waf.DeletePermissionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeletePermissionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeletePermissionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRateBasedRule provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRateBasedRule(_a0 *waf.DeleteRateBasedRuleInput) (*waf.DeleteRateBasedRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteRateBasedRuleOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteRateBasedRuleInput) *waf.DeleteRateBasedRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRateBasedRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteRateBasedRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRateBasedRuleRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRateBasedRuleRequest(_a0 *waf.DeleteRateBasedRuleInput) (*request.Request, *waf.DeleteRateBasedRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteRateBasedRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteRateBasedRuleOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteRateBasedRuleInput) *waf.DeleteRateBasedRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteRateBasedRuleOutput)
		}
	}

	return r0, r1
}

// DeleteRateBasedRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteRateBasedRuleWithContext(_a0 context.Context, _a1 *waf.DeleteRateBasedRuleInput, _a2 ...request.Option) (*waf.DeleteRateBasedRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteRateBasedRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteRateBasedRuleInput, ...request.Option) *waf.DeleteRateBasedRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRateBasedRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteRateBasedRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegexMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRegexMatchSet(_a0 *waf.DeleteRegexMatchSetInput) (*waf.DeleteRegexMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteRegexMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteRegexMatchSetInput) *waf.DeleteRegexMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRegexMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteRegexMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegexMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRegexMatchSetRequest(_a0 *waf.DeleteRegexMatchSetInput) (*request.Request, *waf.DeleteRegexMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteRegexMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteRegexMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteRegexMatchSetInput) *waf.DeleteRegexMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteRegexMatchSetOutput)
		}
	}

	return r0, r1
}

// DeleteRegexMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteRegexMatchSetWithContext(_a0 context.Context, _a1 *waf.DeleteRegexMatchSetInput, _a2 ...request.Option) (*waf.DeleteRegexMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteRegexMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteRegexMatchSetInput, ...request.Option) *waf.DeleteRegexMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRegexMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteRegexMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegexPatternSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRegexPatternSet(_a0 *waf.DeleteRegexPatternSetInput) (*waf.DeleteRegexPatternSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteRegexPatternSetInput) *waf.DeleteRegexPatternSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteRegexPatternSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegexPatternSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRegexPatternSetRequest(_a0 *waf.DeleteRegexPatternSetInput) (*request.Request, *waf.DeleteRegexPatternSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteRegexPatternSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteRegexPatternSetOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteRegexPatternSetInput) *waf.DeleteRegexPatternSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteRegexPatternSetOutput)
		}
	}

	return r0, r1
}

// DeleteRegexPatternSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteRegexPatternSetWithContext(_a0 context.Context, _a1 *waf.DeleteRegexPatternSetInput, _a2 ...request.Option) (*waf.DeleteRegexPatternSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteRegexPatternSetInput, ...request.Option) *waf.DeleteRegexPatternSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteRegexPatternSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRule(_a0 *waf.DeleteRuleInput) (*waf.DeleteRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteRuleInput) *waf.DeleteRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleGroup provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRuleGroup(_a0 *waf.DeleteRuleGroupInput) (*waf.DeleteRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteRuleGroupInput) *waf.DeleteRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRuleGroupRequest(_a0 *waf.DeleteRuleGroupInput) (*request.Request, *waf.DeleteRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteRuleGroupInput) *waf.DeleteRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteRuleGroupOutput)
		}
	}

	return r0, r1
}

// DeleteRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteRuleGroupWithContext(_a0 context.Context, _a1 *waf.DeleteRuleGroupInput, _a2 ...request.Option) (*waf.DeleteRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteRuleGroupInput, ...request.Option) *waf.DeleteRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteRuleRequest(_a0 *waf.DeleteRuleInput) (*request.Request, *waf.DeleteRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteRuleOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteRuleInput) *waf.DeleteRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteRuleOutput)
		}
	}

	return r0, r1
}

// DeleteRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteRuleWithContext(_a0 context.Context, _a1 *waf.DeleteRuleInput, _a2 ...request.Option) (*waf.DeleteRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteRuleInput, ...request.Option) *waf.DeleteRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSizeConstraintSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteSizeConstraintSet(_a0 *waf.DeleteSizeConstraintSetInput) (*waf.DeleteSizeConstraintSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteSizeConstraintSetOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteSizeConstraintSetInput) *waf.DeleteSizeConstraintSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteSizeConstraintSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteSizeConstraintSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSizeConstraintSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteSizeConstraintSetRequest(_a0 *waf.DeleteSizeConstraintSetInput) (*request.Request, *waf.DeleteSizeConstraintSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteSizeConstraintSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteSizeConstraintSetOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteSizeConstraintSetInput) *waf.DeleteSizeConstraintSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteSizeConstraintSetOutput)
		}
	}

	return r0, r1
}

// DeleteSizeConstraintSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteSizeConstraintSetWithContext(_a0 context.Context, _a1 *waf.DeleteSizeConstraintSetInput, _a2 ...request.Option) (*waf.DeleteSizeConstraintSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteSizeConstraintSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteSizeConstraintSetInput, ...request.Option) *waf.DeleteSizeConstraintSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteSizeConstraintSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteSizeConstraintSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSqlInjectionMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteSqlInjectionMatchSet(_a0 *waf.DeleteSqlInjectionMatchSetInput) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteSqlInjectionMatchSetInput) *waf.DeleteSqlInjectionMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteSqlInjectionMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteSqlInjectionMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSqlInjectionMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteSqlInjectionMatchSetRequest(_a0 *waf.DeleteSqlInjectionMatchSetInput) (*request.Request, *waf.DeleteSqlInjectionMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteSqlInjectionMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteSqlInjectionMatchSetInput) *waf.DeleteSqlInjectionMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteSqlInjectionMatchSetOutput)
		}
	}

	return r0, r1
}

// DeleteSqlInjectionMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteSqlInjectionMatchSetWithContext(_a0 context.Context, _a1 *waf.DeleteSqlInjectionMatchSetInput, _a2 ...request.Option) (*waf.DeleteSqlInjectionMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteSqlInjectionMatchSetInput, ...request.Option) *waf.DeleteSqlInjectionMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteSqlInjectionMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteSqlInjectionMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebACL provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteWebACL(_a0 *waf.DeleteWebACLInput) (*waf.DeleteWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteWebACLOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteWebACLInput) *waf.DeleteWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteWebACLRequest(_a0 *waf.DeleteWebACLInput) (*request.Request, *waf.DeleteWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteWebACLOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteWebACLInput) *waf.DeleteWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteWebACLOutput)
		}
	}

	return r0, r1
}

// DeleteWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteWebACLWithContext(_a0 context.Context, _a1 *waf.DeleteWebACLInput, _a2 ...request.Option) (*waf.DeleteWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteWebACLInput, ...request.Option) *waf.DeleteWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteXssMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteXssMatchSet(_a0 *waf.DeleteXssMatchSetInput) (*waf.DeleteXssMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.DeleteXssMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.DeleteXssMatchSetInput) *waf.DeleteXssMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteXssMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.DeleteXssMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteXssMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DeleteXssMatchSetRequest(_a0 *waf.DeleteXssMatchSetInput) (*request.Request, *waf.DeleteXssMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.DeleteXssMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.DeleteXssMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.DeleteXssMatchSetInput) *waf.DeleteXssMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.DeleteXssMatchSetOutput)
		}
	}

	return r0, r1
}

// DeleteXssMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DeleteXssMatchSetWithContext(_a0 context.Context, _a1 *waf.DeleteXssMatchSetInput, _a2 ...request.Option) (*waf.DeleteXssMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.DeleteXssMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.DeleteXssMatchSetInput, ...request.Option) *waf.DeleteXssMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.DeleteXssMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.DeleteXssMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateWebACL provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DisassociateWebACL(_a0 *wafregional.DisassociateWebACLInput) (*wafregional.DisassociateWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafregional.DisassociateWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafregional.DisassociateWebACLInput) *wafregional.DisassociateWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafregional.DisassociateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafregional.DisassociateWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) DisassociateWebACLRequest(_a0 *wafregional.DisassociateWebACLInput) (*request.Request, *wafregional.DisassociateWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafregional.DisassociateWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafregional.DisassociateWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafregional.DisassociateWebACLInput) *wafregional.DisassociateWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafregional.DisassociateWebACLOutput)
		}
	}

	return r0, r1
}

// DisassociateWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) DisassociateWebACLWithContext(_a0 context.Context, _a1 *wafregional.DisassociateWebACLInput, _a2 ...request.Option) (*wafregional.DisassociateWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafregional.DisassociateWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafregional.DisassociateWebACLInput, ...request.Option) *wafregional.DisassociateWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafregional.DisassociateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafregional.DisassociateWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByteMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetByteMatchSet(_a0 *waf.GetByteMatchSetInput) (*waf.GetByteMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetByteMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.GetByteMatchSetInput) *waf.GetByteMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetByteMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetByteMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByteMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetByteMatchSetRequest(_a0 *waf.GetByteMatchSetInput) (*request.Request, *waf.GetByteMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetByteMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetByteMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.GetByteMatchSetInput) *waf.GetByteMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetByteMatchSetOutput)
		}
	}

	return r0, r1
}

// GetByteMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetByteMatchSetWithContext(_a0 context.Context, _a1 *waf.GetByteMatchSetInput, _a2 ...request.Option) (*waf.GetByteMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetByteMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetByteMatchSetInput, ...request.Option) *waf.GetByteMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetByteMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetByteMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeToken provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetChangeToken(_a0 *waf.GetChangeTokenInput) (*waf.GetChangeTokenOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetChangeTokenOutput
	if rf, ok := ret.Get(0).(func(*waf.GetChangeTokenInput) *waf.GetChangeTokenOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetChangeTokenOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetChangeTokenInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeTokenRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetChangeTokenRequest(_a0 *waf.GetChangeTokenInput) (*request.Request, *waf.GetChangeTokenOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetChangeTokenInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetChangeTokenOutput
	if rf, ok := ret.Get(1).(func(*waf.GetChangeTokenInput) *waf.GetChangeTokenOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetChangeTokenOutput)
		}
	}

	return r0, r1
}

// GetChangeTokenStatus provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetChangeTokenStatus(_a0 *waf.GetChangeTokenStatusInput) (*waf.GetChangeTokenStatusOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetChangeTokenStatusOutput
	if rf, ok := ret.Get(0).(func(*waf.GetChangeTokenStatusInput) *waf.GetChangeTokenStatusOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetChangeTokenStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetChangeTokenStatusInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeTokenStatusRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetChangeTokenStatusRequest(_a0 *waf.GetChangeTokenStatusInput) (*request.Request, *waf.GetChangeTokenStatusOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetChangeTokenStatusInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetChangeTokenStatusOutput
	if rf, ok := ret.Get(1).(func(*waf.GetChangeTokenStatusInput) *waf.GetChangeTokenStatusOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetChangeTokenStatusOutput)
		}
	}

	return r0, r1
}

// GetChangeTokenStatusWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetChangeTokenStatusWithContext(_a0 context.Context, _a1 *waf.GetChangeTokenStatusInput, _a2 ...request.Option) (*waf.GetChangeTokenStatusOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetChangeTokenStatusOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetChangeTokenStatusInput, ...request.Option) *waf.GetChangeTokenStatusOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetChangeTokenStatusOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetChangeTokenStatusInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeTokenWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetChangeTokenWithContext(_a0 context.Context, _a1 *waf.GetChangeTokenInput, _a2 ...request.Option) (*waf.GetChangeTokenOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetChangeTokenOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetChangeTokenInput, ...request.Option) *waf.GetChangeTokenOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetChangeTokenOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetChangeTokenInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGeoMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetGeoMatchSet(_a0 *waf.GetGeoMatchSetInput) (*waf.GetGeoMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetGeoMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.GetGeoMatchSetInput) *waf.GetGeoMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetGeoMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetGeoMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGeoMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetGeoMatchSetRequest(_a0 *waf.GetGeoMatchSetInput) (*request.Request, *waf.GetGeoMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetGeoMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetGeoMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.GetGeoMatchSetInput) *waf.GetGeoMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetGeoMatchSetOutput)
		}
	}

	return r0, r1
}

// GetGeoMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetGeoMatchSetWithContext(_a0 context.Context, _a1 *waf.GetGeoMatchSetInput, _a2 ...request.Option) (*waf.GetGeoMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetGeoMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetGeoMatchSetInput, ...request.Option) *waf.GetGeoMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetGeoMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetGeoMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetIPSet(_a0 *waf.GetIPSetInput) (*waf.GetIPSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetIPSetOutput
	if rf, ok := ret.Get(0).(func(*waf.GetIPSetInput) *waf.GetIPSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetIPSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetIPSetRequest(_a0 *waf.GetIPSetInput) (*request.Request, *waf.GetIPSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetIPSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetIPSetOutput
	if rf, ok := ret.Get(1).(func(*waf.GetIPSetInput) *waf.GetIPSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetIPSetOutput)
		}
	}

	return r0, r1
}

// GetIPSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetIPSetWithContext(_a0 context.Context, _a1 *waf.GetIPSetInput, _a2 ...request.Option) (*waf.GetIPSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetIPSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetIPSetInput, ...request.Option) *waf.GetIPSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetIPSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggingConfiguration provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetLoggingConfiguration(_a0 *waf.GetLoggingConfigurationInput) (*waf.GetLoggingConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(*waf.GetLoggingConfigurationInput) *waf.GetLoggingConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetLoggingConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggingConfigurationRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetLoggingConfigurationRequest(_a0 *waf.GetLoggingConfigurationInput) (*request.Request, *waf.GetLoggingConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetLoggingConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetLoggingConfigurationOutput
	if rf, ok := ret.Get(1).(func(*waf.GetLoggingConfigurationInput) *waf.GetLoggingConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetLoggingConfigurationOutput)
		}
	}

	return r0, r1
}

// GetLoggingConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetLoggingConfigurationWithContext(_a0 context.Context, _a1 *waf.GetLoggingConfigurationInput, _a2 ...request.Option) (*waf.GetLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetLoggingConfigurationInput, ...request.Option) *waf.GetLoggingConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetLoggingConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionPolicy provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetPermissionPolicy(_a0 *waf.GetPermissionPolicyInput) (*waf.GetPermissionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetPermissionPolicyOutput
	if rf, ok := ret.Get(0).(func(*waf.GetPermissionPolicyInput) *waf.GetPermissionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetPermissionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetPermissionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionPolicyRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetPermissionPolicyRequest(_a0 *waf.GetPermissionPolicyInput) (*request.Request, *waf.GetPermissionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetPermissionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetPermissionPolicyOutput
	if rf, ok := ret.Get(1).(func(*waf.GetPermissionPolicyInput) *waf.GetPermissionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetPermissionPolicyOutput)
		}
	}

	return r0, r1
}

// GetPermissionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetPermissionPolicyWithContext(_a0 context.Context, _a1 *waf.GetPermissionPolicyInput, _a2 ...request.Option) (*waf.GetPermissionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetPermissionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetPermissionPolicyInput, ...request.Option) *waf.GetPermissionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetPermissionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetPermissionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRateBasedRule provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRateBasedRule(_a0 *waf.GetRateBasedRuleInput) (*waf.GetRateBasedRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetRateBasedRuleOutput
	if rf, ok := ret.Get(0).(func(*waf.GetRateBasedRuleInput) *waf.GetRateBasedRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRateBasedRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetRateBasedRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRateBasedRuleManagedKeys provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRateBasedRuleManagedKeys(_a0 *waf.GetRateBasedRuleManagedKeysInput) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetRateBasedRuleManagedKeysOutput
	if rf, ok := ret.Get(0).(func(*waf.GetRateBasedRuleManagedKeysInput) *waf.GetRateBasedRuleManagedKeysOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRateBasedRuleManagedKeysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetRateBasedRuleManagedKeysInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRateBasedRuleManagedKeysRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRateBasedRuleManagedKeysRequest(_a0 *waf.GetRateBasedRuleManagedKeysInput) (*request.Request, *waf.GetRateBasedRuleManagedKeysOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetRateBasedRuleManagedKeysInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetRateBasedRuleManagedKeysOutput
	if rf, ok := ret.Get(1).(func(*waf.GetRateBasedRuleManagedKeysInput) *waf.GetRateBasedRuleManagedKeysOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetRateBasedRuleManagedKeysOutput)
		}
	}

	return r0, r1
}

// GetRateBasedRuleManagedKeysWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetRateBasedRuleManagedKeysWithContext(_a0 context.Context, _a1 *waf.GetRateBasedRuleManagedKeysInput, _a2 ...request.Option) (*waf.GetRateBasedRuleManagedKeysOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetRateBasedRuleManagedKeysOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetRateBasedRuleManagedKeysInput, ...request.Option) *waf.GetRateBasedRuleManagedKeysOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRateBasedRuleManagedKeysOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetRateBasedRuleManagedKeysInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRateBasedRuleRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRateBasedRuleRequest(_a0 *waf.GetRateBasedRuleInput) (*request.Request, *waf.GetRateBasedRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetRateBasedRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetRateBasedRuleOutput
	if rf, ok := ret.Get(1).(func(*waf.GetRateBasedRuleInput) *waf.GetRateBasedRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetRateBasedRuleOutput)
		}
	}

	return r0, r1
}

// GetRateBasedRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetRateBasedRuleWithContext(_a0 context.Context, _a1 *waf.GetRateBasedRuleInput, _a2 ...request.Option) (*waf.GetRateBasedRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetRateBasedRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetRateBasedRuleInput, ...request.Option) *waf.GetRateBasedRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRateBasedRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetRateBasedRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegexMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRegexMatchSet(_a0 *waf.GetRegexMatchSetInput) (*waf.GetRegexMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetRegexMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.GetRegexMatchSetInput) *waf.GetRegexMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRegexMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetRegexMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegexMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRegexMatchSetRequest(_a0 *waf.GetRegexMatchSetInput) (*request.Request, *waf.GetRegexMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetRegexMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetRegexMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.GetRegexMatchSetInput) *waf.GetRegexMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetRegexMatchSetOutput)
		}
	}

	return r0, r1
}

// GetRegexMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetRegexMatchSetWithContext(_a0 context.Context, _a1 *waf.GetRegexMatchSetInput, _a2 ...request.Option) (*waf.GetRegexMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetRegexMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetRegexMatchSetInput, ...request.Option) *waf.GetRegexMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRegexMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetRegexMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegexPatternSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRegexPatternSet(_a0 *waf.GetRegexPatternSetInput) (*waf.GetRegexPatternSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(*waf.GetRegexPatternSetInput) *waf.GetRegexPatternSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetRegexPatternSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegexPatternSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRegexPatternSetRequest(_a0 *waf.GetRegexPatternSetInput) (*request.Request, *waf.GetRegexPatternSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetRegexPatternSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetRegexPatternSetOutput
	if rf, ok := ret.Get(1).(func(*waf.GetRegexPatternSetInput) *waf.GetRegexPatternSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetRegexPatternSetOutput)
		}
	}

	return r0, r1
}

// GetRegexPatternSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetRegexPatternSetWithContext(_a0 context.Context, _a1 *waf.GetRegexPatternSetInput, _a2 ...request.Option) (*waf.GetRegexPatternSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetRegexPatternSetInput, ...request.Option) *waf.GetRegexPatternSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetRegexPatternSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRule provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRule(_a0 *waf.GetRuleInput) (*waf.GetRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetRuleOutput
	if rf, ok := ret.Get(0).(func(*waf.GetRuleInput) *waf.GetRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuleGroup provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRuleGroup(_a0 *waf.GetRuleGroupInput) (*waf.GetRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*waf.GetRuleGroupInput) *waf.GetRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRuleGroupRequest(_a0 *waf.GetRuleGroupInput) (*request.Request, *waf.GetRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*waf.GetRuleGroupInput) *waf.GetRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetRuleGroupOutput)
		}
	}

	return r0, r1
}

// GetRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetRuleGroupWithContext(_a0 context.Context, _a1 *waf.GetRuleGroupInput, _a2 ...request.Option) (*waf.GetRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetRuleGroupInput, ...request.Option) *waf.GetRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuleRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetRuleRequest(_a0 *waf.GetRuleInput) (*request.Request, *waf.GetRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetRuleOutput
	if rf, ok := ret.Get(1).(func(*waf.GetRuleInput) *waf.GetRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetRuleOutput)
		}
	}

	return r0, r1
}

// GetRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetRuleWithContext(_a0 context.Context, _a1 *waf.GetRuleInput, _a2 ...request.Option) (*waf.GetRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetRuleInput, ...request.Option) *waf.GetRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSampledRequests provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetSampledRequests(_a0 *waf.GetSampledRequestsInput) (*waf.GetSampledRequestsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetSampledRequestsOutput
	if rf, ok := ret.Get(0).(func(*waf.GetSampledRequestsInput) *waf.GetSampledRequestsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetSampledRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetSampledRequestsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSampledRequestsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetSampledRequestsRequest(_a0 *waf.GetSampledRequestsInput) (*request.Request, *waf.GetSampledRequestsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetSampledRequestsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetSampledRequestsOutput
	if rf, ok := ret.Get(1).(func(*waf.GetSampledRequestsInput) *waf.GetSampledRequestsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetSampledRequestsOutput)
		}
	}

	return r0, r1
}

// GetSampledRequestsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetSampledRequestsWithContext(_a0 context.Context, _a1 *waf.GetSampledRequestsInput, _a2 ...request.Option) (*waf.GetSampledRequestsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetSampledRequestsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetSampledRequestsInput, ...request.Option) *waf.GetSampledRequestsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetSampledRequestsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetSampledRequestsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSizeConstraintSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetSizeConstraintSet(_a0 *waf.GetSizeConstraintSetInput) (*waf.GetSizeConstraintSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetSizeConstraintSetOutput
	if rf, ok := ret.Get(0).(func(*waf.GetSizeConstraintSetInput) *waf.GetSizeConstraintSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetSizeConstraintSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetSizeConstraintSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSizeConstraintSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetSizeConstraintSetRequest(_a0 *waf.GetSizeConstraintSetInput) (*request.Request, *waf.GetSizeConstraintSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetSizeConstraintSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetSizeConstraintSetOutput
	if rf, ok := ret.Get(1).(func(*waf.GetSizeConstraintSetInput) *waf.GetSizeConstraintSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetSizeConstraintSetOutput)
		}
	}

	return r0, r1
}

// GetSizeConstraintSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetSizeConstraintSetWithContext(_a0 context.Context, _a1 *waf.GetSizeConstraintSetInput, _a2 ...request.Option) (*waf.GetSizeConstraintSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetSizeConstraintSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetSizeConstraintSetInput, ...request.Option) *waf.GetSizeConstraintSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetSizeConstraintSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetSizeConstraintSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSqlInjectionMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetSqlInjectionMatchSet(_a0 *waf.GetSqlInjectionMatchSetInput) (*waf.GetSqlInjectionMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.GetSqlInjectionMatchSetInput) *waf.GetSqlInjectionMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetSqlInjectionMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetSqlInjectionMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSqlInjectionMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetSqlInjectionMatchSetRequest(_a0 *waf.GetSqlInjectionMatchSetInput) (*request.Request, *waf.GetSqlInjectionMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetSqlInjectionMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.GetSqlInjectionMatchSetInput) *waf.GetSqlInjectionMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetSqlInjectionMatchSetOutput)
		}
	}

	return r0, r1
}

// GetSqlInjectionMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetSqlInjectionMatchSetWithContext(_a0 context.Context, _a1 *waf.GetSqlInjectionMatchSetInput, _a2 ...request.Option) (*waf.GetSqlInjectionMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetSqlInjectionMatchSetInput, ...request.Option) *waf.GetSqlInjectionMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetSqlInjectionMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetSqlInjectionMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebACL provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetWebACL(_a0 *waf.GetWebACLInput) (*waf.GetWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetWebACLOutput
	if rf, ok := ret.Get(0).(func(*waf.GetWebACLInput) *waf.GetWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebACLForResource provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetWebACLForResource(_a0 *wafregional.GetWebACLForResourceInput) (*wafregional.GetWebACLForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafregional.GetWebACLForResourceOutput
	if rf, ok := ret.Get(0).(func(*wafregional.GetWebACLForResourceInput) *wafregional.GetWebACLForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafregional.GetWebACLForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafregional.GetWebACLForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebACLForResourceRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetWebACLForResourceRequest(_a0 *wafregional.GetWebACLForResourceInput) (*request.Request, *wafregional.GetWebACLForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafregional.GetWebACLForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafregional.GetWebACLForResourceOutput
	if rf, ok := ret.Get(1).(func(*wafregional.GetWebACLForResourceInput) *wafregional.GetWebACLForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafregional.GetWebACLForResourceOutput)
		}
	}

	return r0, r1
}

// GetWebACLForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetWebACLForResourceWithContext(_a0 context.Context, _a1 *wafregional.GetWebACLForResourceInput, _a2 ...request.Option) (*wafregional.GetWebACLForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafregional.GetWebACLForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafregional.GetWebACLForResourceInput, ...request.Option) *wafregional.GetWebACLForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafregional.GetWebACLForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafregional.GetWebACLForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetWebACLRequest(_a0 *waf.GetWebACLInput) (*request.Request, *waf.GetWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetWebACLOutput
	if rf, ok := ret.Get(1).(func(*waf.GetWebACLInput) *waf.GetWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetWebACLOutput)
		}
	}

	return r0, r1
}

// GetWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetWebACLWithContext(_a0 context.Context, _a1 *waf.GetWebACLInput, _a2 ...request.Option) (*waf.GetWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetWebACLInput, ...request.Option) *waf.GetWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetXssMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetXssMatchSet(_a0 *waf.GetXssMatchSetInput) (*waf.GetXssMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.GetXssMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.GetXssMatchSetInput) *waf.GetXssMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetXssMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.GetXssMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetXssMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) GetXssMatchSetRequest(_a0 *waf.GetXssMatchSetInput) (*request.Request, *waf.GetXssMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.GetXssMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.GetXssMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.GetXssMatchSetInput) *waf.GetXssMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.GetXssMatchSetOutput)
		}
	}

	return r0, r1
}

// GetXssMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) GetXssMatchSetWithContext(_a0 context.Context, _a1 *waf.GetXssMatchSetInput, _a2 ...request.Option) (*waf.GetXssMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.GetXssMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.GetXssMatchSetInput, ...request.Option) *waf.GetXssMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.GetXssMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.GetXssMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActivatedRulesInRuleGroup provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListActivatedRulesInRuleGroup(_a0 *waf.ListActivatedRulesInRuleGroupInput) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListActivatedRulesInRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*waf.ListActivatedRulesInRuleGroupInput) *waf.ListActivatedRulesInRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListActivatedRulesInRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListActivatedRulesInRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActivatedRulesInRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListActivatedRulesInRuleGroupRequest(_a0 *waf.ListActivatedRulesInRuleGroupInput) (*request.Request, *waf.ListActivatedRulesInRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListActivatedRulesInRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListActivatedRulesInRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*waf.ListActivatedRulesInRuleGroupInput) *waf.ListActivatedRulesInRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListActivatedRulesInRuleGroupOutput)
		}
	}

	return r0, r1
}

// ListActivatedRulesInRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListActivatedRulesInRuleGroupWithContext(_a0 context.Context, _a1 *waf.ListActivatedRulesInRuleGroupInput, _a2 ...request.Option) (*waf.ListActivatedRulesInRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListActivatedRulesInRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListActivatedRulesInRuleGroupInput, ...request.Option) *waf.ListActivatedRulesInRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListActivatedRulesInRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListActivatedRulesInRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByteMatchSets provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListByteMatchSets(_a0 *waf.ListByteMatchSetsInput) (*waf.ListByteMatchSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListByteMatchSetsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListByteMatchSetsInput) *waf.ListByteMatchSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListByteMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListByteMatchSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByteMatchSetsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListByteMatchSetsRequest(_a0 *waf.ListByteMatchSetsInput) (*request.Request, *waf.ListByteMatchSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListByteMatchSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListByteMatchSetsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListByteMatchSetsInput) *waf.ListByteMatchSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListByteMatchSetsOutput)
		}
	}

	return r0, r1
}

// ListByteMatchSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListByteMatchSetsWithContext(_a0 context.Context, _a1 *waf.ListByteMatchSetsInput, _a2 ...request.Option) (*waf.ListByteMatchSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListByteMatchSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListByteMatchSetsInput, ...request.Option) *waf.ListByteMatchSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListByteMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListByteMatchSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGeoMatchSets provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListGeoMatchSets(_a0 *waf.ListGeoMatchSetsInput) (*waf.ListGeoMatchSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListGeoMatchSetsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListGeoMatchSetsInput) *waf.ListGeoMatchSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListGeoMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListGeoMatchSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGeoMatchSetsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListGeoMatchSetsRequest(_a0 *waf.ListGeoMatchSetsInput) (*request.Request, *waf.ListGeoMatchSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListGeoMatchSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListGeoMatchSetsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListGeoMatchSetsInput) *waf.ListGeoMatchSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListGeoMatchSetsOutput)
		}
	}

	return r0, r1
}

// ListGeoMatchSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListGeoMatchSetsWithContext(_a0 context.Context, _a1 *waf.ListGeoMatchSetsInput, _a2 ...request.Option) (*waf.ListGeoMatchSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListGeoMatchSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListGeoMatchSetsInput, ...request.Option) *waf.ListGeoMatchSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListGeoMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListGeoMatchSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIPSets provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListIPSets(_a0 *waf.ListIPSetsInput) (*waf.ListIPSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListIPSetsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListIPSetsInput) *waf.ListIPSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListIPSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListIPSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIPSetsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListIPSetsRequest(_a0 *waf.ListIPSetsInput) (*request.Request, *waf.ListIPSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListIPSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListIPSetsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListIPSetsInput) *waf.ListIPSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListIPSetsOutput)
		}
	}

	return r0, r1
}

// ListIPSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListIPSetsWithContext(_a0 context.Context, _a1 *waf.ListIPSetsInput, _a2 ...request.Option) (*waf.ListIPSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListIPSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListIPSetsInput, ...request.Option) *waf.ListIPSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListIPSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListIPSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoggingConfigurations provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListLoggingConfigurations(_a0 *waf.ListLoggingConfigurationsInput) (*waf.ListLoggingConfigurationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListLoggingConfigurationsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListLoggingConfigurationsInput) *waf.ListLoggingConfigurationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListLoggingConfigurationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListLoggingConfigurationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoggingConfigurationsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListLoggingConfigurationsRequest(_a0 *waf.ListLoggingConfigurationsInput) (*request.Request, *waf.ListLoggingConfigurationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListLoggingConfigurationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListLoggingConfigurationsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListLoggingConfigurationsInput) *waf.ListLoggingConfigurationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListLoggingConfigurationsOutput)
		}
	}

	return r0, r1
}

// ListLoggingConfigurationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListLoggingConfigurationsWithContext(_a0 context.Context, _a1 *waf.ListLoggingConfigurationsInput, _a2 ...request.Option) (*waf.ListLoggingConfigurationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListLoggingConfigurationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListLoggingConfigurationsInput, ...request.Option) *waf.ListLoggingConfigurationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListLoggingConfigurationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListLoggingConfigurationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRateBasedRules provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRateBasedRules(_a0 *waf.ListRateBasedRulesInput) (*waf.ListRateBasedRulesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListRateBasedRulesOutput
	if rf, ok := ret.Get(0).(func(*waf.ListRateBasedRulesInput) *waf.ListRateBasedRulesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRateBasedRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListRateBasedRulesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRateBasedRulesRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRateBasedRulesRequest(_a0 *waf.ListRateBasedRulesInput) (*request.Request, *waf.ListRateBasedRulesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListRateBasedRulesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListRateBasedRulesOutput
	if rf, ok := ret.Get(1).(func(*waf.ListRateBasedRulesInput) *waf.ListRateBasedRulesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListRateBasedRulesOutput)
		}
	}

	return r0, r1
}

// ListRateBasedRulesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListRateBasedRulesWithContext(_a0 context.Context, _a1 *waf.ListRateBasedRulesInput, _a2 ...request.Option) (*waf.ListRateBasedRulesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListRateBasedRulesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListRateBasedRulesInput, ...request.Option) *waf.ListRateBasedRulesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRateBasedRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListRateBasedRulesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegexMatchSets provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRegexMatchSets(_a0 *waf.ListRegexMatchSetsInput) (*waf.ListRegexMatchSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListRegexMatchSetsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListRegexMatchSetsInput) *waf.ListRegexMatchSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRegexMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListRegexMatchSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegexMatchSetsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRegexMatchSetsRequest(_a0 *waf.ListRegexMatchSetsInput) (*request.Request, *waf.ListRegexMatchSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListRegexMatchSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListRegexMatchSetsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListRegexMatchSetsInput) *waf.ListRegexMatchSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListRegexMatchSetsOutput)
		}
	}

	return r0, r1
}

// ListRegexMatchSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListRegexMatchSetsWithContext(_a0 context.Context, _a1 *waf.ListRegexMatchSetsInput, _a2 ...request.Option) (*waf.ListRegexMatchSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListRegexMatchSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListRegexMatchSetsInput, ...request.Option) *waf.ListRegexMatchSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRegexMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListRegexMatchSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegexPatternSets provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRegexPatternSets(_a0 *waf.ListRegexPatternSetsInput) (*waf.ListRegexPatternSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListRegexPatternSetsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListRegexPatternSetsInput) *waf.ListRegexPatternSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRegexPatternSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListRegexPatternSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegexPatternSetsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRegexPatternSetsRequest(_a0 *waf.ListRegexPatternSetsInput) (*request.Request, *waf.ListRegexPatternSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListRegexPatternSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListRegexPatternSetsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListRegexPatternSetsInput) *waf.ListRegexPatternSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListRegexPatternSetsOutput)
		}
	}

	return r0, r1
}

// ListRegexPatternSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListRegexPatternSetsWithContext(_a0 context.Context, _a1 *waf.ListRegexPatternSetsInput, _a2 ...request.Option) (*waf.ListRegexPatternSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListRegexPatternSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListRegexPatternSetsInput, ...request.Option) *waf.ListRegexPatternSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRegexPatternSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListRegexPatternSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcesForWebACL provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListResourcesForWebACL(_a0 *wafregional.ListResourcesForWebACLInput) (*wafregional.ListResourcesForWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *wafregional.ListResourcesForWebACLOutput
	if rf, ok := ret.Get(0).(func(*wafregional.ListResourcesForWebACLInput) *wafregional.ListResourcesForWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafregional.ListResourcesForWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wafregional.ListResourcesForWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcesForWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListResourcesForWebACLRequest(_a0 *wafregional.ListResourcesForWebACLInput) (*request.Request, *wafregional.ListResourcesForWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*wafregional.ListResourcesForWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *wafregional.ListResourcesForWebACLOutput
	if rf, ok := ret.Get(1).(func(*wafregional.ListResourcesForWebACLInput) *wafregional.ListResourcesForWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wafregional.ListResourcesForWebACLOutput)
		}
	}

	return r0, r1
}

// ListResourcesForWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListResourcesForWebACLWithContext(_a0 context.Context, _a1 *wafregional.ListResourcesForWebACLInput, _a2 ...request.Option) (*wafregional.ListResourcesForWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *wafregional.ListResourcesForWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *wafregional.ListResourcesForWebACLInput, ...request.Option) *wafregional.ListResourcesForWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wafregional.ListResourcesForWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *wafregional.ListResourcesForWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleGroups provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRuleGroups(_a0 *waf.ListRuleGroupsInput) (*waf.ListRuleGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListRuleGroupsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListRuleGroupsInput) *waf.ListRuleGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRuleGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListRuleGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleGroupsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRuleGroupsRequest(_a0 *waf.ListRuleGroupsInput) (*request.Request, *waf.ListRuleGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListRuleGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListRuleGroupsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListRuleGroupsInput) *waf.ListRuleGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListRuleGroupsOutput)
		}
	}

	return r0, r1
}

// ListRuleGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListRuleGroupsWithContext(_a0 context.Context, _a1 *waf.ListRuleGroupsInput, _a2 ...request.Option) (*waf.ListRuleGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListRuleGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListRuleGroupsInput, ...request.Option) *waf.ListRuleGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRuleGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListRuleGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRules(_a0 *waf.ListRulesInput) (*waf.ListRulesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListRulesOutput
	if rf, ok := ret.Get(0).(func(*waf.ListRulesInput) *waf.ListRulesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListRulesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRulesRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListRulesRequest(_a0 *waf.ListRulesInput) (*request.Request, *waf.ListRulesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListRulesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListRulesOutput
	if rf, ok := ret.Get(1).(func(*waf.ListRulesInput) *waf.ListRulesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListRulesOutput)
		}
	}

	return r0, r1
}

// ListRulesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListRulesWithContext(_a0 context.Context, _a1 *waf.ListRulesInput, _a2 ...request.Option) (*waf.ListRulesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListRulesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListRulesInput, ...request.Option) *waf.ListRulesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListRulesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListRulesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSizeConstraintSets provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListSizeConstraintSets(_a0 *waf.ListSizeConstraintSetsInput) (*waf.ListSizeConstraintSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListSizeConstraintSetsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListSizeConstraintSetsInput) *waf.ListSizeConstraintSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListSizeConstraintSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListSizeConstraintSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSizeConstraintSetsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListSizeConstraintSetsRequest(_a0 *waf.ListSizeConstraintSetsInput) (*request.Request, *waf.ListSizeConstraintSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListSizeConstraintSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListSizeConstraintSetsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListSizeConstraintSetsInput) *waf.ListSizeConstraintSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListSizeConstraintSetsOutput)
		}
	}

	return r0, r1
}

// ListSizeConstraintSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListSizeConstraintSetsWithContext(_a0 context.Context, _a1 *waf.ListSizeConstraintSetsInput, _a2 ...request.Option) (*waf.ListSizeConstraintSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListSizeConstraintSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListSizeConstraintSetsInput, ...request.Option) *waf.ListSizeConstraintSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListSizeConstraintSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListSizeConstraintSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSqlInjectionMatchSets provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListSqlInjectionMatchSets(_a0 *waf.ListSqlInjectionMatchSetsInput) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListSqlInjectionMatchSetsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListSqlInjectionMatchSetsInput) *waf.ListSqlInjectionMatchSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListSqlInjectionMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListSqlInjectionMatchSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSqlInjectionMatchSetsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListSqlInjectionMatchSetsRequest(_a0 *waf.ListSqlInjectionMatchSetsInput) (*request.Request, *waf.ListSqlInjectionMatchSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListSqlInjectionMatchSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListSqlInjectionMatchSetsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListSqlInjectionMatchSetsInput) *waf.ListSqlInjectionMatchSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListSqlInjectionMatchSetsOutput)
		}
	}

	return r0, r1
}

// ListSqlInjectionMatchSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListSqlInjectionMatchSetsWithContext(_a0 context.Context, _a1 *waf.ListSqlInjectionMatchSetsInput, _a2 ...request.Option) (*waf.ListSqlInjectionMatchSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListSqlInjectionMatchSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListSqlInjectionMatchSetsInput, ...request.Option) *waf.ListSqlInjectionMatchSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListSqlInjectionMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListSqlInjectionMatchSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscribedRuleGroups provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListSubscribedRuleGroups(_a0 *waf.ListSubscribedRuleGroupsInput) (*waf.ListSubscribedRuleGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListSubscribedRuleGroupsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListSubscribedRuleGroupsInput) *waf.ListSubscribedRuleGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListSubscribedRuleGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListSubscribedRuleGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscribedRuleGroupsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListSubscribedRuleGroupsRequest(_a0 *waf.ListSubscribedRuleGroupsInput) (*request.Request, *waf.ListSubscribedRuleGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListSubscribedRuleGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListSubscribedRuleGroupsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListSubscribedRuleGroupsInput) *waf.ListSubscribedRuleGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListSubscribedRuleGroupsOutput)
		}
	}

	return r0, r1
}

// ListSubscribedRuleGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListSubscribedRuleGroupsWithContext(_a0 context.Context, _a1 *waf.ListSubscribedRuleGroupsInput, _a2 ...request.Option) (*waf.ListSubscribedRuleGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListSubscribedRuleGroupsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListSubscribedRuleGroupsInput, ...request.Option) *waf.ListSubscribedRuleGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListSubscribedRuleGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListSubscribedRuleGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListTagsForResource(_a0 *waf.ListTagsForResourceInput) (*waf.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*waf.ListTagsForResourceInput) *waf.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListTagsForResourceRequest(_a0 *waf.ListTagsForResourceInput) (*request.Request, *waf.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*waf.ListTagsForResourceInput) *waf.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *waf.ListTagsForResourceInput, _a2 ...request.Option) (*waf.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListTagsForResourceInput, ...request.Option) *waf.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebACLs provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListWebACLs(_a0 *waf.ListWebACLsInput) (*waf.ListWebACLsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListWebACLsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListWebACLsInput) *waf.ListWebACLsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListWebACLsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListWebACLsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebACLsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListWebACLsRequest(_a0 *waf.ListWebACLsInput) (*request.Request, *waf.ListWebACLsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListWebACLsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListWebACLsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListWebACLsInput) *waf.ListWebACLsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListWebACLsOutput)
		}
	}

	return r0, r1
}

// ListWebACLsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListWebACLsWithContext(_a0 context.Context, _a1 *waf.ListWebACLsInput, _a2 ...request.Option) (*waf.ListWebACLsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListWebACLsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListWebACLsInput, ...request.Option) *waf.ListWebACLsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListWebACLsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListWebACLsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListXssMatchSets provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListXssMatchSets(_a0 *waf.ListXssMatchSetsInput) (*waf.ListXssMatchSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.ListXssMatchSetsOutput
	if rf, ok := ret.Get(0).(func(*waf.ListXssMatchSetsInput) *waf.ListXssMatchSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListXssMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.ListXssMatchSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListXssMatchSetsRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) ListXssMatchSetsRequest(_a0 *waf.ListXssMatchSetsInput) (*request.Request, *waf.ListXssMatchSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.ListXssMatchSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.ListXssMatchSetsOutput
	if rf, ok := ret.Get(1).(func(*waf.ListXssMatchSetsInput) *waf.ListXssMatchSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.ListXssMatchSetsOutput)
		}
	}

	return r0, r1
}

// ListXssMatchSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) ListXssMatchSetsWithContext(_a0 context.Context, _a1 *waf.ListXssMatchSetsInput, _a2 ...request.Option) (*waf.ListXssMatchSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.ListXssMatchSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.ListXssMatchSetsInput, ...request.Option) *waf.ListXssMatchSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.ListXssMatchSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.ListXssMatchSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLoggingConfiguration provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) PutLoggingConfiguration(_a0 *waf.PutLoggingConfigurationInput) (*waf.PutLoggingConfigurationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.PutLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(*waf.PutLoggingConfigurationInput) *waf.PutLoggingConfigurationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.PutLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.PutLoggingConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLoggingConfigurationRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) PutLoggingConfigurationRequest(_a0 *waf.PutLoggingConfigurationInput) (*request.Request, *waf.PutLoggingConfigurationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.PutLoggingConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.PutLoggingConfigurationOutput
	if rf, ok := ret.Get(1).(func(*waf.PutLoggingConfigurationInput) *waf.PutLoggingConfigurationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.PutLoggingConfigurationOutput)
		}
	}

	return r0, r1
}

// PutLoggingConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) PutLoggingConfigurationWithContext(_a0 context.Context, _a1 *waf.PutLoggingConfigurationInput, _a2 ...request.Option) (*waf.PutLoggingConfigurationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.PutLoggingConfigurationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.PutLoggingConfigurationInput, ...request.Option) *waf.PutLoggingConfigurationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.PutLoggingConfigurationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.PutLoggingConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermissionPolicy provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) PutPermissionPolicy(_a0 *waf.PutPermissionPolicyInput) (*waf.PutPermissionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.PutPermissionPolicyOutput
	if rf, ok := ret.Get(0).(func(*waf.PutPermissionPolicyInput) *waf.PutPermissionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.PutPermissionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.PutPermissionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermissionPolicyRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) PutPermissionPolicyRequest(_a0 *waf.PutPermissionPolicyInput) (*request.Request, *waf.PutPermissionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.PutPermissionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.PutPermissionPolicyOutput
	if rf, ok := ret.Get(1).(func(*waf.PutPermissionPolicyInput) *waf.PutPermissionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.PutPermissionPolicyOutput)
		}
	}

	return r0, r1
}

// PutPermissionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) PutPermissionPolicyWithContext(_a0 context.Context, _a1 *waf.PutPermissionPolicyInput, _a2 ...request.Option) (*waf.PutPermissionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.PutPermissionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.PutPermissionPolicyInput, ...request.Option) *waf.PutPermissionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.PutPermissionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.PutPermissionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) TagResource(_a0 *waf.TagResourceInput) (*waf.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*waf.TagResourceInput) *waf.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) TagResourceRequest(_a0 *waf.TagResourceInput) (*request.Request, *waf.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*waf.TagResourceInput) *waf.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) TagResourceWithContext(_a0 context.Context, _a1 *waf.TagResourceInput, _a2 ...request.Option) (*waf.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.TagResourceInput, ...request.Option) *waf.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UntagResource(_a0 *waf.UntagResourceInput) (*waf.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*waf.UntagResourceInput) *waf.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UntagResourceRequest(_a0 *waf.UntagResourceInput) (*request.Request, *waf.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*waf.UntagResourceInput) *waf.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UntagResourceWithContext(_a0 context.Context, _a1 *waf.UntagResourceInput, _a2 ...request.Option) (*waf.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UntagResourceInput, ...request.Option) *waf.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByteMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateByteMatchSet(_a0 *waf.UpdateByteMatchSetInput) (*waf.UpdateByteMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateByteMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateByteMatchSetInput) *waf.UpdateByteMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateByteMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateByteMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByteMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateByteMatchSetRequest(_a0 *waf.UpdateByteMatchSetInput) (*request.Request, *waf.UpdateByteMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateByteMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateByteMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateByteMatchSetInput) *waf.UpdateByteMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateByteMatchSetOutput)
		}
	}

	return r0, r1
}

// UpdateByteMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateByteMatchSetWithContext(_a0 context.Context, _a1 *waf.UpdateByteMatchSetInput, _a2 ...request.Option) (*waf.UpdateByteMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateByteMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateByteMatchSetInput, ...request.Option) *waf.UpdateByteMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateByteMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateByteMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGeoMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateGeoMatchSet(_a0 *waf.UpdateGeoMatchSetInput) (*waf.UpdateGeoMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateGeoMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateGeoMatchSetInput) *waf.UpdateGeoMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateGeoMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateGeoMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGeoMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateGeoMatchSetRequest(_a0 *waf.UpdateGeoMatchSetInput) (*request.Request, *waf.UpdateGeoMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateGeoMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateGeoMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateGeoMatchSetInput) *waf.UpdateGeoMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateGeoMatchSetOutput)
		}
	}

	return r0, r1
}

// UpdateGeoMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateGeoMatchSetWithContext(_a0 context.Context, _a1 *waf.UpdateGeoMatchSetInput, _a2 ...request.Option) (*waf.UpdateGeoMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateGeoMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateGeoMatchSetInput, ...request.Option) *waf.UpdateGeoMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateGeoMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateGeoMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIPSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateIPSet(_a0 *waf.UpdateIPSetInput) (*waf.UpdateIPSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateIPSetOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateIPSetInput) *waf.UpdateIPSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateIPSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIPSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateIPSetRequest(_a0 *waf.UpdateIPSetInput) (*request.Request, *waf.UpdateIPSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateIPSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateIPSetOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateIPSetInput) *waf.UpdateIPSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateIPSetOutput)
		}
	}

	return r0, r1
}

// UpdateIPSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateIPSetWithContext(_a0 context.Context, _a1 *waf.UpdateIPSetInput, _a2 ...request.Option) (*waf.UpdateIPSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateIPSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateIPSetInput, ...request.Option) *waf.UpdateIPSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateIPSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateIPSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRateBasedRule provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRateBasedRule(_a0 *waf.UpdateRateBasedRuleInput) (*waf.UpdateRateBasedRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateRateBasedRuleOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateRateBasedRuleInput) *waf.UpdateRateBasedRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRateBasedRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateRateBasedRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRateBasedRuleRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRateBasedRuleRequest(_a0 *waf.UpdateRateBasedRuleInput) (*request.Request, *waf.UpdateRateBasedRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateRateBasedRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateRateBasedRuleOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateRateBasedRuleInput) *waf.UpdateRateBasedRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateRateBasedRuleOutput)
		}
	}

	return r0, r1
}

// UpdateRateBasedRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateRateBasedRuleWithContext(_a0 context.Context, _a1 *waf.UpdateRateBasedRuleInput, _a2 ...request.Option) (*waf.UpdateRateBasedRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateRateBasedRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateRateBasedRuleInput, ...request.Option) *waf.UpdateRateBasedRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRateBasedRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateRateBasedRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegexMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRegexMatchSet(_a0 *waf.UpdateRegexMatchSetInput) (*waf.UpdateRegexMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateRegexMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateRegexMatchSetInput) *waf.UpdateRegexMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRegexMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateRegexMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegexMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRegexMatchSetRequest(_a0 *waf.UpdateRegexMatchSetInput) (*request.Request, *waf.UpdateRegexMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateRegexMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateRegexMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateRegexMatchSetInput) *waf.UpdateRegexMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateRegexMatchSetOutput)
		}
	}

	return r0, r1
}

// UpdateRegexMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateRegexMatchSetWithContext(_a0 context.Context, _a1 *waf.UpdateRegexMatchSetInput, _a2 ...request.Option) (*waf.UpdateRegexMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateRegexMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateRegexMatchSetInput, ...request.Option) *waf.UpdateRegexMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRegexMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateRegexMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegexPatternSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRegexPatternSet(_a0 *waf.UpdateRegexPatternSetInput) (*waf.UpdateRegexPatternSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateRegexPatternSetInput) *waf.UpdateRegexPatternSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateRegexPatternSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegexPatternSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRegexPatternSetRequest(_a0 *waf.UpdateRegexPatternSetInput) (*request.Request, *waf.UpdateRegexPatternSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateRegexPatternSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateRegexPatternSetOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateRegexPatternSetInput) *waf.UpdateRegexPatternSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateRegexPatternSetOutput)
		}
	}

	return r0, r1
}

// UpdateRegexPatternSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateRegexPatternSetWithContext(_a0 context.Context, _a1 *waf.UpdateRegexPatternSetInput, _a2 ...request.Option) (*waf.UpdateRegexPatternSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateRegexPatternSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateRegexPatternSetInput, ...request.Option) *waf.UpdateRegexPatternSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRegexPatternSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateRegexPatternSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRule provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRule(_a0 *waf.UpdateRuleInput) (*waf.UpdateRuleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateRuleOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateRuleInput) *waf.UpdateRuleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateRuleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRuleGroup provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRuleGroup(_a0 *waf.UpdateRuleGroupInput) (*waf.UpdateRuleGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateRuleGroupOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateRuleGroupInput) *waf.UpdateRuleGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateRuleGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRuleGroupRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRuleGroupRequest(_a0 *waf.UpdateRuleGroupInput) (*request.Request, *waf.UpdateRuleGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateRuleGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateRuleGroupOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateRuleGroupInput) *waf.UpdateRuleGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateRuleGroupOutput)
		}
	}

	return r0, r1
}

// UpdateRuleGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateRuleGroupWithContext(_a0 context.Context, _a1 *waf.UpdateRuleGroupInput, _a2 ...request.Option) (*waf.UpdateRuleGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateRuleGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateRuleGroupInput, ...request.Option) *waf.UpdateRuleGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRuleGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateRuleGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRuleRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateRuleRequest(_a0 *waf.UpdateRuleInput) (*request.Request, *waf.UpdateRuleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateRuleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateRuleOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateRuleInput) *waf.UpdateRuleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateRuleOutput)
		}
	}

	return r0, r1
}

// UpdateRuleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateRuleWithContext(_a0 context.Context, _a1 *waf.UpdateRuleInput, _a2 ...request.Option) (*waf.UpdateRuleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateRuleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateRuleInput, ...request.Option) *waf.UpdateRuleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateRuleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateRuleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSizeConstraintSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateSizeConstraintSet(_a0 *waf.UpdateSizeConstraintSetInput) (*waf.UpdateSizeConstraintSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateSizeConstraintSetOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateSizeConstraintSetInput) *waf.UpdateSizeConstraintSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateSizeConstraintSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateSizeConstraintSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSizeConstraintSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateSizeConstraintSetRequest(_a0 *waf.UpdateSizeConstraintSetInput) (*request.Request, *waf.UpdateSizeConstraintSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateSizeConstraintSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateSizeConstraintSetOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateSizeConstraintSetInput) *waf.UpdateSizeConstraintSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateSizeConstraintSetOutput)
		}
	}

	return r0, r1
}

// UpdateSizeConstraintSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateSizeConstraintSetWithContext(_a0 context.Context, _a1 *waf.UpdateSizeConstraintSetInput, _a2 ...request.Option) (*waf.UpdateSizeConstraintSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateSizeConstraintSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateSizeConstraintSetInput, ...request.Option) *waf.UpdateSizeConstraintSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateSizeConstraintSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateSizeConstraintSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSqlInjectionMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateSqlInjectionMatchSet(_a0 *waf.UpdateSqlInjectionMatchSetInput) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateSqlInjectionMatchSetInput) *waf.UpdateSqlInjectionMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateSqlInjectionMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateSqlInjectionMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSqlInjectionMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateSqlInjectionMatchSetRequest(_a0 *waf.UpdateSqlInjectionMatchSetInput) (*request.Request, *waf.UpdateSqlInjectionMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateSqlInjectionMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateSqlInjectionMatchSetInput) *waf.UpdateSqlInjectionMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateSqlInjectionMatchSetOutput)
		}
	}

	return r0, r1
}

// UpdateSqlInjectionMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateSqlInjectionMatchSetWithContext(_a0 context.Context, _a1 *waf.UpdateSqlInjectionMatchSetInput, _a2 ...request.Option) (*waf.UpdateSqlInjectionMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateSqlInjectionMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateSqlInjectionMatchSetInput, ...request.Option) *waf.UpdateSqlInjectionMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateSqlInjectionMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateSqlInjectionMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebACL provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateWebACL(_a0 *waf.UpdateWebACLInput) (*waf.UpdateWebACLOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateWebACLOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateWebACLInput) *waf.UpdateWebACLOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateWebACLInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebACLRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateWebACLRequest(_a0 *waf.UpdateWebACLInput) (*request.Request, *waf.UpdateWebACLOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateWebACLInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateWebACLOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateWebACLInput) *waf.UpdateWebACLOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateWebACLOutput)
		}
	}

	return r0, r1
}

// UpdateWebACLWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateWebACLWithContext(_a0 context.Context, _a1 *waf.UpdateWebACLInput, _a2 ...request.Option) (*waf.UpdateWebACLOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateWebACLOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateWebACLInput, ...request.Option) *waf.UpdateWebACLOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateWebACLOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateWebACLInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateXssMatchSet provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateXssMatchSet(_a0 *waf.UpdateXssMatchSetInput) (*waf.UpdateXssMatchSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *waf.UpdateXssMatchSetOutput
	if rf, ok := ret.Get(0).(func(*waf.UpdateXssMatchSetInput) *waf.UpdateXssMatchSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateXssMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*waf.UpdateXssMatchSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateXssMatchSetRequest provides a mock function with given fields: _a0
func (_m *WAFRegionalAPI) UpdateXssMatchSetRequest(_a0 *waf.UpdateXssMatchSetInput) (*request.Request, *waf.UpdateXssMatchSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*waf.UpdateXssMatchSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *waf.UpdateXssMatchSetOutput
	if rf, ok := ret.Get(1).(func(*waf.UpdateXssMatchSetInput) *waf.UpdateXssMatchSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*waf.UpdateXssMatchSetOutput)
		}
	}

	return r0, r1
}

// UpdateXssMatchSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *WAFRegionalAPI) UpdateXssMatchSetWithContext(_a0 context.Context, _a1 *waf.UpdateXssMatchSetInput, _a2 ...request.Option) (*waf.UpdateXssMatchSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *waf.UpdateXssMatchSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *waf.UpdateXssMatchSetInput, ...request.Option) *waf.UpdateXssMatchSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waf.UpdateXssMatchSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *waf.UpdateXssMatchSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
