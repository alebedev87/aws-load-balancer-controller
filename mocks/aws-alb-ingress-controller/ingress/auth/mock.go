// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubernetes-sigs/aws-alb-ingress-controller/internal/ingress/auth (interfaces: Module)

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	auth "github.com/kubernetes-sigs/aws-alb-ingress-controller/internal/ingress/auth"
	v1beta1 "k8s.io/api/extensions/v1beta1"
	reflect "reflect"
	controller "sigs.k8s.io/controller-runtime/pkg/controller"
	event "sigs.k8s.io/controller-runtime/pkg/event"
)

// MockModule is a mock of Module interface
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
}

// MockModuleMockRecorder is the mock recorder for MockModule
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockModule) Init(arg0 controller.Controller, arg1, arg2 chan<- event.GenericEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockModuleMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockModule)(nil).Init), arg0, arg1, arg2)
}

// NewConfig mocks base method
func (m *MockModule) NewConfig(arg0 context.Context, arg1 *v1beta1.Ingress, arg2 v1beta1.IngressBackend, arg3 string) (auth.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(auth.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConfig indicates an expected call of NewConfig
func (mr *MockModuleMockRecorder) NewConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConfig", reflect.TypeOf((*MockModule)(nil).NewConfig), arg0, arg1, arg2, arg3)
}
