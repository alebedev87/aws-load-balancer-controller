// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/aws-load-balancer-controller/pkg/networking (interfaces: SubnetsResolver)

// Package mock_networking is a generated GoMock package.
package mock_networking

import (
	context "context"
	ec2 "github.com/aws/aws-sdk-go/service/ec2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	elbv2 "sigs.k8s.io/aws-load-balancer-controller/pkg/model/elbv2"
)

// MockSubnetsResolver is a mock of SubnetsResolver interface
type MockSubnetsResolver struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetsResolverMockRecorder
}

// MockSubnetsResolverMockRecorder is the mock recorder for MockSubnetsResolver
type MockSubnetsResolverMockRecorder struct {
	mock *MockSubnetsResolver
}

// NewMockSubnetsResolver creates a new mock instance
func NewMockSubnetsResolver(ctrl *gomock.Controller) *MockSubnetsResolver {
	mock := &MockSubnetsResolver{ctrl: ctrl}
	mock.recorder = &MockSubnetsResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubnetsResolver) EXPECT() *MockSubnetsResolverMockRecorder {
	return m.recorder
}

// DiscoverSubnets mocks base method
func (m *MockSubnetsResolver) DiscoverSubnets(arg0 context.Context, arg1 elbv2.LoadBalancerScheme) ([]*ec2.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverSubnets", arg0, arg1)
	ret0, _ := ret[0].([]*ec2.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverSubnets indicates an expected call of DiscoverSubnets
func (mr *MockSubnetsResolverMockRecorder) DiscoverSubnets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverSubnets", reflect.TypeOf((*MockSubnetsResolver)(nil).DiscoverSubnets), arg0, arg1)
}
