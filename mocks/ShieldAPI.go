// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"

	shield "github.com/aws/aws-sdk-go/service/shield"
)

// ShieldAPI is an autogenerated mock type for the ShieldAPI type
type ShieldAPI struct {
	mock.Mock
}

// AssociateDRTLogBucket provides a mock function with given fields: _a0
func (_m *ShieldAPI) AssociateDRTLogBucket(_a0 *shield.AssociateDRTLogBucketInput) (*shield.AssociateDRTLogBucketOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.AssociateDRTLogBucketOutput
	if rf, ok := ret.Get(0).(func(*shield.AssociateDRTLogBucketInput) *shield.AssociateDRTLogBucketOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.AssociateDRTLogBucketOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.AssociateDRTLogBucketInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDRTLogBucketRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) AssociateDRTLogBucketRequest(_a0 *shield.AssociateDRTLogBucketInput) (*request.Request, *shield.AssociateDRTLogBucketOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.AssociateDRTLogBucketInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.AssociateDRTLogBucketOutput
	if rf, ok := ret.Get(1).(func(*shield.AssociateDRTLogBucketInput) *shield.AssociateDRTLogBucketOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.AssociateDRTLogBucketOutput)
		}
	}

	return r0, r1
}

// AssociateDRTLogBucketWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) AssociateDRTLogBucketWithContext(_a0 context.Context, _a1 *shield.AssociateDRTLogBucketInput, _a2 ...request.Option) (*shield.AssociateDRTLogBucketOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.AssociateDRTLogBucketOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateDRTLogBucketInput, ...request.Option) *shield.AssociateDRTLogBucketOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.AssociateDRTLogBucketOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.AssociateDRTLogBucketInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDRTRole provides a mock function with given fields: _a0
func (_m *ShieldAPI) AssociateDRTRole(_a0 *shield.AssociateDRTRoleInput) (*shield.AssociateDRTRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.AssociateDRTRoleOutput
	if rf, ok := ret.Get(0).(func(*shield.AssociateDRTRoleInput) *shield.AssociateDRTRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.AssociateDRTRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.AssociateDRTRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDRTRoleRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) AssociateDRTRoleRequest(_a0 *shield.AssociateDRTRoleInput) (*request.Request, *shield.AssociateDRTRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.AssociateDRTRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.AssociateDRTRoleOutput
	if rf, ok := ret.Get(1).(func(*shield.AssociateDRTRoleInput) *shield.AssociateDRTRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.AssociateDRTRoleOutput)
		}
	}

	return r0, r1
}

// AssociateDRTRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) AssociateDRTRoleWithContext(_a0 context.Context, _a1 *shield.AssociateDRTRoleInput, _a2 ...request.Option) (*shield.AssociateDRTRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.AssociateDRTRoleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.AssociateDRTRoleInput, ...request.Option) *shield.AssociateDRTRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.AssociateDRTRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.AssociateDRTRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProtection provides a mock function with given fields: _a0
func (_m *ShieldAPI) CreateProtection(_a0 *shield.CreateProtectionInput) (*shield.CreateProtectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.CreateProtectionOutput
	if rf, ok := ret.Get(0).(func(*shield.CreateProtectionInput) *shield.CreateProtectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.CreateProtectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.CreateProtectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProtectionRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) CreateProtectionRequest(_a0 *shield.CreateProtectionInput) (*request.Request, *shield.CreateProtectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.CreateProtectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.CreateProtectionOutput
	if rf, ok := ret.Get(1).(func(*shield.CreateProtectionInput) *shield.CreateProtectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.CreateProtectionOutput)
		}
	}

	return r0, r1
}

// CreateProtectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) CreateProtectionWithContext(_a0 context.Context, _a1 *shield.CreateProtectionInput, _a2 ...request.Option) (*shield.CreateProtectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.CreateProtectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.CreateProtectionInput, ...request.Option) *shield.CreateProtectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.CreateProtectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.CreateProtectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscription provides a mock function with given fields: _a0
func (_m *ShieldAPI) CreateSubscription(_a0 *shield.CreateSubscriptionInput) (*shield.CreateSubscriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.CreateSubscriptionOutput
	if rf, ok := ret.Get(0).(func(*shield.CreateSubscriptionInput) *shield.CreateSubscriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.CreateSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.CreateSubscriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriptionRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) CreateSubscriptionRequest(_a0 *shield.CreateSubscriptionInput) (*request.Request, *shield.CreateSubscriptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.CreateSubscriptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.CreateSubscriptionOutput
	if rf, ok := ret.Get(1).(func(*shield.CreateSubscriptionInput) *shield.CreateSubscriptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.CreateSubscriptionOutput)
		}
	}

	return r0, r1
}

// CreateSubscriptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) CreateSubscriptionWithContext(_a0 context.Context, _a1 *shield.CreateSubscriptionInput, _a2 ...request.Option) (*shield.CreateSubscriptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.CreateSubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.CreateSubscriptionInput, ...request.Option) *shield.CreateSubscriptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.CreateSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.CreateSubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtection provides a mock function with given fields: _a0
func (_m *ShieldAPI) DeleteProtection(_a0 *shield.DeleteProtectionInput) (*shield.DeleteProtectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DeleteProtectionOutput
	if rf, ok := ret.Get(0).(func(*shield.DeleteProtectionInput) *shield.DeleteProtectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DeleteProtectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DeleteProtectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtectionRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DeleteProtectionRequest(_a0 *shield.DeleteProtectionInput) (*request.Request, *shield.DeleteProtectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DeleteProtectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DeleteProtectionOutput
	if rf, ok := ret.Get(1).(func(*shield.DeleteProtectionInput) *shield.DeleteProtectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DeleteProtectionOutput)
		}
	}

	return r0, r1
}

// DeleteProtectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DeleteProtectionWithContext(_a0 context.Context, _a1 *shield.DeleteProtectionInput, _a2 ...request.Option) (*shield.DeleteProtectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DeleteProtectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DeleteProtectionInput, ...request.Option) *shield.DeleteProtectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DeleteProtectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DeleteProtectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscription provides a mock function with given fields: _a0
func (_m *ShieldAPI) DeleteSubscription(_a0 *shield.DeleteSubscriptionInput) (*shield.DeleteSubscriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DeleteSubscriptionOutput
	if rf, ok := ret.Get(0).(func(*shield.DeleteSubscriptionInput) *shield.DeleteSubscriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DeleteSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DeleteSubscriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriptionRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DeleteSubscriptionRequest(_a0 *shield.DeleteSubscriptionInput) (*request.Request, *shield.DeleteSubscriptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DeleteSubscriptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DeleteSubscriptionOutput
	if rf, ok := ret.Get(1).(func(*shield.DeleteSubscriptionInput) *shield.DeleteSubscriptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DeleteSubscriptionOutput)
		}
	}

	return r0, r1
}

// DeleteSubscriptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DeleteSubscriptionWithContext(_a0 context.Context, _a1 *shield.DeleteSubscriptionInput, _a2 ...request.Option) (*shield.DeleteSubscriptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DeleteSubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DeleteSubscriptionInput, ...request.Option) *shield.DeleteSubscriptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DeleteSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DeleteSubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAttack provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeAttack(_a0 *shield.DescribeAttackInput) (*shield.DescribeAttackOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DescribeAttackOutput
	if rf, ok := ret.Get(0).(func(*shield.DescribeAttackInput) *shield.DescribeAttackOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeAttackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DescribeAttackInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAttackRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeAttackRequest(_a0 *shield.DescribeAttackInput) (*request.Request, *shield.DescribeAttackOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DescribeAttackInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DescribeAttackOutput
	if rf, ok := ret.Get(1).(func(*shield.DescribeAttackInput) *shield.DescribeAttackOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DescribeAttackOutput)
		}
	}

	return r0, r1
}

// DescribeAttackWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DescribeAttackWithContext(_a0 context.Context, _a1 *shield.DescribeAttackInput, _a2 ...request.Option) (*shield.DescribeAttackOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DescribeAttackOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeAttackInput, ...request.Option) *shield.DescribeAttackOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeAttackOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeAttackInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDRTAccess provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeDRTAccess(_a0 *shield.DescribeDRTAccessInput) (*shield.DescribeDRTAccessOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DescribeDRTAccessOutput
	if rf, ok := ret.Get(0).(func(*shield.DescribeDRTAccessInput) *shield.DescribeDRTAccessOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeDRTAccessOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DescribeDRTAccessInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDRTAccessRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeDRTAccessRequest(_a0 *shield.DescribeDRTAccessInput) (*request.Request, *shield.DescribeDRTAccessOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DescribeDRTAccessInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DescribeDRTAccessOutput
	if rf, ok := ret.Get(1).(func(*shield.DescribeDRTAccessInput) *shield.DescribeDRTAccessOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DescribeDRTAccessOutput)
		}
	}

	return r0, r1
}

// DescribeDRTAccessWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DescribeDRTAccessWithContext(_a0 context.Context, _a1 *shield.DescribeDRTAccessInput, _a2 ...request.Option) (*shield.DescribeDRTAccessOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DescribeDRTAccessOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeDRTAccessInput, ...request.Option) *shield.DescribeDRTAccessOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeDRTAccessOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeDRTAccessInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEmergencyContactSettings provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeEmergencyContactSettings(_a0 *shield.DescribeEmergencyContactSettingsInput) (*shield.DescribeEmergencyContactSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DescribeEmergencyContactSettingsOutput
	if rf, ok := ret.Get(0).(func(*shield.DescribeEmergencyContactSettingsInput) *shield.DescribeEmergencyContactSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeEmergencyContactSettingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DescribeEmergencyContactSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEmergencyContactSettingsRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeEmergencyContactSettingsRequest(_a0 *shield.DescribeEmergencyContactSettingsInput) (*request.Request, *shield.DescribeEmergencyContactSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DescribeEmergencyContactSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DescribeEmergencyContactSettingsOutput
	if rf, ok := ret.Get(1).(func(*shield.DescribeEmergencyContactSettingsInput) *shield.DescribeEmergencyContactSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DescribeEmergencyContactSettingsOutput)
		}
	}

	return r0, r1
}

// DescribeEmergencyContactSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DescribeEmergencyContactSettingsWithContext(_a0 context.Context, _a1 *shield.DescribeEmergencyContactSettingsInput, _a2 ...request.Option) (*shield.DescribeEmergencyContactSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DescribeEmergencyContactSettingsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeEmergencyContactSettingsInput, ...request.Option) *shield.DescribeEmergencyContactSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeEmergencyContactSettingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeEmergencyContactSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProtection provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeProtection(_a0 *shield.DescribeProtectionInput) (*shield.DescribeProtectionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DescribeProtectionOutput
	if rf, ok := ret.Get(0).(func(*shield.DescribeProtectionInput) *shield.DescribeProtectionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeProtectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DescribeProtectionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProtectionRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeProtectionRequest(_a0 *shield.DescribeProtectionInput) (*request.Request, *shield.DescribeProtectionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DescribeProtectionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DescribeProtectionOutput
	if rf, ok := ret.Get(1).(func(*shield.DescribeProtectionInput) *shield.DescribeProtectionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DescribeProtectionOutput)
		}
	}

	return r0, r1
}

// DescribeProtectionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DescribeProtectionWithContext(_a0 context.Context, _a1 *shield.DescribeProtectionInput, _a2 ...request.Option) (*shield.DescribeProtectionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DescribeProtectionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeProtectionInput, ...request.Option) *shield.DescribeProtectionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeProtectionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeProtectionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubscription provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeSubscription(_a0 *shield.DescribeSubscriptionInput) (*shield.DescribeSubscriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DescribeSubscriptionOutput
	if rf, ok := ret.Get(0).(func(*shield.DescribeSubscriptionInput) *shield.DescribeSubscriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DescribeSubscriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubscriptionRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DescribeSubscriptionRequest(_a0 *shield.DescribeSubscriptionInput) (*request.Request, *shield.DescribeSubscriptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DescribeSubscriptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DescribeSubscriptionOutput
	if rf, ok := ret.Get(1).(func(*shield.DescribeSubscriptionInput) *shield.DescribeSubscriptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DescribeSubscriptionOutput)
		}
	}

	return r0, r1
}

// DescribeSubscriptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DescribeSubscriptionWithContext(_a0 context.Context, _a1 *shield.DescribeSubscriptionInput, _a2 ...request.Option) (*shield.DescribeSubscriptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DescribeSubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DescribeSubscriptionInput, ...request.Option) *shield.DescribeSubscriptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DescribeSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DescribeSubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDRTLogBucket provides a mock function with given fields: _a0
func (_m *ShieldAPI) DisassociateDRTLogBucket(_a0 *shield.DisassociateDRTLogBucketInput) (*shield.DisassociateDRTLogBucketOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DisassociateDRTLogBucketOutput
	if rf, ok := ret.Get(0).(func(*shield.DisassociateDRTLogBucketInput) *shield.DisassociateDRTLogBucketOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisassociateDRTLogBucketOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DisassociateDRTLogBucketInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDRTLogBucketRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DisassociateDRTLogBucketRequest(_a0 *shield.DisassociateDRTLogBucketInput) (*request.Request, *shield.DisassociateDRTLogBucketOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DisassociateDRTLogBucketInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DisassociateDRTLogBucketOutput
	if rf, ok := ret.Get(1).(func(*shield.DisassociateDRTLogBucketInput) *shield.DisassociateDRTLogBucketOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DisassociateDRTLogBucketOutput)
		}
	}

	return r0, r1
}

// DisassociateDRTLogBucketWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DisassociateDRTLogBucketWithContext(_a0 context.Context, _a1 *shield.DisassociateDRTLogBucketInput, _a2 ...request.Option) (*shield.DisassociateDRTLogBucketOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DisassociateDRTLogBucketOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisassociateDRTLogBucketInput, ...request.Option) *shield.DisassociateDRTLogBucketOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisassociateDRTLogBucketOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DisassociateDRTLogBucketInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDRTRole provides a mock function with given fields: _a0
func (_m *ShieldAPI) DisassociateDRTRole(_a0 *shield.DisassociateDRTRoleInput) (*shield.DisassociateDRTRoleOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.DisassociateDRTRoleOutput
	if rf, ok := ret.Get(0).(func(*shield.DisassociateDRTRoleInput) *shield.DisassociateDRTRoleOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisassociateDRTRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.DisassociateDRTRoleInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDRTRoleRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) DisassociateDRTRoleRequest(_a0 *shield.DisassociateDRTRoleInput) (*request.Request, *shield.DisassociateDRTRoleOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.DisassociateDRTRoleInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.DisassociateDRTRoleOutput
	if rf, ok := ret.Get(1).(func(*shield.DisassociateDRTRoleInput) *shield.DisassociateDRTRoleOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.DisassociateDRTRoleOutput)
		}
	}

	return r0, r1
}

// DisassociateDRTRoleWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) DisassociateDRTRoleWithContext(_a0 context.Context, _a1 *shield.DisassociateDRTRoleInput, _a2 ...request.Option) (*shield.DisassociateDRTRoleOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.DisassociateDRTRoleOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.DisassociateDRTRoleInput, ...request.Option) *shield.DisassociateDRTRoleOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.DisassociateDRTRoleOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.DisassociateDRTRoleInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionState provides a mock function with given fields: _a0
func (_m *ShieldAPI) GetSubscriptionState(_a0 *shield.GetSubscriptionStateInput) (*shield.GetSubscriptionStateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.GetSubscriptionStateOutput
	if rf, ok := ret.Get(0).(func(*shield.GetSubscriptionStateInput) *shield.GetSubscriptionStateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.GetSubscriptionStateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.GetSubscriptionStateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionStateRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) GetSubscriptionStateRequest(_a0 *shield.GetSubscriptionStateInput) (*request.Request, *shield.GetSubscriptionStateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.GetSubscriptionStateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.GetSubscriptionStateOutput
	if rf, ok := ret.Get(1).(func(*shield.GetSubscriptionStateInput) *shield.GetSubscriptionStateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.GetSubscriptionStateOutput)
		}
	}

	return r0, r1
}

// GetSubscriptionStateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) GetSubscriptionStateWithContext(_a0 context.Context, _a1 *shield.GetSubscriptionStateInput, _a2 ...request.Option) (*shield.GetSubscriptionStateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.GetSubscriptionStateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.GetSubscriptionStateInput, ...request.Option) *shield.GetSubscriptionStateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.GetSubscriptionStateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.GetSubscriptionStateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttacks provides a mock function with given fields: _a0
func (_m *ShieldAPI) ListAttacks(_a0 *shield.ListAttacksInput) (*shield.ListAttacksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.ListAttacksOutput
	if rf, ok := ret.Get(0).(func(*shield.ListAttacksInput) *shield.ListAttacksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListAttacksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.ListAttacksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttacksRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) ListAttacksRequest(_a0 *shield.ListAttacksInput) (*request.Request, *shield.ListAttacksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.ListAttacksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.ListAttacksOutput
	if rf, ok := ret.Get(1).(func(*shield.ListAttacksInput) *shield.ListAttacksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.ListAttacksOutput)
		}
	}

	return r0, r1
}

// ListAttacksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) ListAttacksWithContext(_a0 context.Context, _a1 *shield.ListAttacksInput, _a2 ...request.Option) (*shield.ListAttacksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.ListAttacksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListAttacksInput, ...request.Option) *shield.ListAttacksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListAttacksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.ListAttacksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProtections provides a mock function with given fields: _a0
func (_m *ShieldAPI) ListProtections(_a0 *shield.ListProtectionsInput) (*shield.ListProtectionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.ListProtectionsOutput
	if rf, ok := ret.Get(0).(func(*shield.ListProtectionsInput) *shield.ListProtectionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListProtectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.ListProtectionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProtectionsRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) ListProtectionsRequest(_a0 *shield.ListProtectionsInput) (*request.Request, *shield.ListProtectionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.ListProtectionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.ListProtectionsOutput
	if rf, ok := ret.Get(1).(func(*shield.ListProtectionsInput) *shield.ListProtectionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.ListProtectionsOutput)
		}
	}

	return r0, r1
}

// ListProtectionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) ListProtectionsWithContext(_a0 context.Context, _a1 *shield.ListProtectionsInput, _a2 ...request.Option) (*shield.ListProtectionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.ListProtectionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.ListProtectionsInput, ...request.Option) *shield.ListProtectionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.ListProtectionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.ListProtectionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmergencyContactSettings provides a mock function with given fields: _a0
func (_m *ShieldAPI) UpdateEmergencyContactSettings(_a0 *shield.UpdateEmergencyContactSettingsInput) (*shield.UpdateEmergencyContactSettingsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.UpdateEmergencyContactSettingsOutput
	if rf, ok := ret.Get(0).(func(*shield.UpdateEmergencyContactSettingsInput) *shield.UpdateEmergencyContactSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UpdateEmergencyContactSettingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.UpdateEmergencyContactSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmergencyContactSettingsRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) UpdateEmergencyContactSettingsRequest(_a0 *shield.UpdateEmergencyContactSettingsInput) (*request.Request, *shield.UpdateEmergencyContactSettingsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.UpdateEmergencyContactSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.UpdateEmergencyContactSettingsOutput
	if rf, ok := ret.Get(1).(func(*shield.UpdateEmergencyContactSettingsInput) *shield.UpdateEmergencyContactSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.UpdateEmergencyContactSettingsOutput)
		}
	}

	return r0, r1
}

// UpdateEmergencyContactSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) UpdateEmergencyContactSettingsWithContext(_a0 context.Context, _a1 *shield.UpdateEmergencyContactSettingsInput, _a2 ...request.Option) (*shield.UpdateEmergencyContactSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.UpdateEmergencyContactSettingsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateEmergencyContactSettingsInput, ...request.Option) *shield.UpdateEmergencyContactSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UpdateEmergencyContactSettingsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.UpdateEmergencyContactSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: _a0
func (_m *ShieldAPI) UpdateSubscription(_a0 *shield.UpdateSubscriptionInput) (*shield.UpdateSubscriptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *shield.UpdateSubscriptionOutput
	if rf, ok := ret.Get(0).(func(*shield.UpdateSubscriptionInput) *shield.UpdateSubscriptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UpdateSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shield.UpdateSubscriptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscriptionRequest provides a mock function with given fields: _a0
func (_m *ShieldAPI) UpdateSubscriptionRequest(_a0 *shield.UpdateSubscriptionInput) (*request.Request, *shield.UpdateSubscriptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*shield.UpdateSubscriptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *shield.UpdateSubscriptionOutput
	if rf, ok := ret.Get(1).(func(*shield.UpdateSubscriptionInput) *shield.UpdateSubscriptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*shield.UpdateSubscriptionOutput)
		}
	}

	return r0, r1
}

// UpdateSubscriptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *ShieldAPI) UpdateSubscriptionWithContext(_a0 context.Context, _a1 *shield.UpdateSubscriptionInput, _a2 ...request.Option) (*shield.UpdateSubscriptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *shield.UpdateSubscriptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *shield.UpdateSubscriptionInput, ...request.Option) *shield.UpdateSubscriptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shield.UpdateSubscriptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *shield.UpdateSubscriptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
